@ { app: boma version: 0.0.4 }
{
    inherit: [cpp17, vulkan]
    namespace: og
    genDir: gen-cpp
    diffable: false

    include: ['"inc/FeatureDb.hpp"']
    serializeTo: [humon]
    deserializeFrom: [humon]

    types: {
        // tableau / objects
        tableau: {

        }

        // featureReqs

        featureReqs: {
            -deriveFrom: FeatureDb<featureDb>
            features: { type: vector of: featureReq }
        }

        cacheInfo: {
            assetDbAddress: { type: optional of: { type: tuple of: [stringView, int] } }
            sizeInCache: int
        }

        featureReq: {
            -deriveFrom: FeatureReq<featureReq>
            featureRefCount: { type: int default: 0 }
            resourceReady: { type: bool default: false }
            cacheSource: { type: optional of: cacheInfo }
            featureDetails: { type: variant of: [featureReq_VkBuffer,
                                                 featureReq_VkImage,
                                                 featureReq_VkShaderModule]}
                                                 // ... others
        }

        featureReq_VkBuffer: {
            sizeInResource: int
            memoryProperties: { type: VkMemoryPropertyFlagBits }
            usages: { type: variant of: VkBufferUsageFlagBits }
            queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
            dedicated: bool
            sparseMemoryFlags: { type: VkSparseMemoryBindFlagBits, default: 0 }
            gpuAddress: { type: optional of: { type: tuple of: [uint8_t, uint8_t, uint16_t, uint32_t] } }
        }

        featureReq_VkImage: {
            sizeInResource: int
            memoryProperties: { type: VkMemoryPropertyFlagBits }
            usages: { type: variant of: VkImageUsageFlagBits }
            queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
            dedicated: bool
            sparseMemoryFlags: { type: VkSparseMemoryBindFlagBits, default: 0 }
            gpuAddress: { type: optional of: { type: tuple of: [uint8_t, uint8_t, uint16_t, uint32_t] } }
        }

        featureReq_VkShaderModule: {
            stage: VkPipelineStageFlagBits
            stringView: entryPoint
        }

        featureReq_VkPipeline: {
        }

        featureReq_VkDescriptorSet: {
        }

        // featureDb

        featureDb: {
            -deriveFrom: MemoryPlan<memoryPlan>
            memoryPlan: { type: list of: memTypePlan }
            vkoPlan: { type: list of: vkoTypePlan }
        }
        memTypePlan: {
            memTypeIndex: int
            memoryProperties: { type: VkMemoryPropertyFlagBits }
            allocations: { type: list of: allocation }
        }
        allocation: {
            allocationIndex: int
            dedicated: true
            usages: { type: variant of: [VkBufferUsageFlagBits, VkImageUsageFlagBits] }
            resources: { type: variant of: [buffer, image]}
        }
        buffer: {
            resourceIndex: int
            assetDbAddress: { type: optional of: { type: tuple of: [stringView, int] } }
            usages: VkBufferUsageFlagBits
            sparseMemoryFlags: VkSparseMemoryBindFlagBits
            sizeInCache: int
            sizeInResource: int
            queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
            subresources: { type: vector of: subBuffer }
        }
        subBuffer: {
            subresourceIndex: int
            assetDbAddress: { type: optional of: { type: tuple of: [stringView, int, int] } }
            usages: VkBufferUsageFlagBits
            sizeInCache: int
            sizeInResource: int
        }
        image: {    // image and subImage are very wrong. I know.
            resourceIndex: int
            assetDbAddress: { type: optional of: { type: tuple of: [stringView, int] } }
            usages: VkImageUsageFlagBits
            sizeInCache: int
            sizeInResource: int
            queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
            subresources: { type: vector of: subImage }
        }
        subImage: {
            subresourceIndex: int
            assetDbAddress: { type: optional of: { type: tuple of: [stringView, int, int] } }
            usages: VkImageUsageFlagBits
            sizeInCache: int
            sizeInResource: int
        }

        vkoTypePlan: {
            vkoIndex: int
            vko: { type: variant of: [] }
        }

        shaderModule: {
            featureDbIndex: int
            assetDbAddress: { type: optional of: { type: tuple of: [stringView, int, int] } }
            stage: VkPipelineStageFlagBits
            entryPoint: stringView
        }

        pipeline: {
            featureDbIndex: int
            // lots of stuff here to collect and compile into a vkpipeline
            // including specializationinfo
            // whatever uniqely defines a pipeline
        }

        descriptorSet: {
            featureDbIndex: int
            // TBD
        }

        // schedule
        featureSchedule: {
            schedule: { type: vector of: { type: variant of: [
                setAssetDbWindowCommand,
                transferCachedAssetCommand,
                stageCachedAssetCommand,
                scheduleStagedTransfersCommand,
                scheduleMemoryMoveCommand,
                /*... other shader / pipeline / other uses (even audio)
                -- anything that needs to be scheduled from cache, really. */]}}
        }

        setAssetDbWindowCommand: {
            assetDb: stringView
            window: int
        }

        transferCachedAssetCommand: {
            assetDb: stringView
            assetIndex: int
            completionFunction: { type: function of: 'void(void*, int)' }
        }

        stageCachedAssetCommand: {
            assetDb: stringView
            assetIndex: int
            stagingBufferIndex: int
            stagingBufferOffset: int
            memorySize: int
            memoryGranularity: int
            completionFunction: { type: function of: 'void()' }
        }

        scheduleStagedTransfersCommand: {
            stagingBufferIndex: int
        }

        scheduleMemoryMoveCommand: {
            from: { type: int } // featureReq index
            to: { type: optional of: { type: tuple of: [uint8_t, uint8_t, uint16_t, uint32_t] } }
            memorySize: int
            completionFunction: { type: function of: 'void()' }
        }
    }
}
