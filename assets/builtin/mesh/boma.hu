@ { app: boma version: 0.0.4 }
{
    inherit: [cpp17]
    namespace: overground
    enums: {
        vertexElementType:  [ float32, float64,
                              int8, int16, int32, int64,
                              uint8, uint16, uint32, uint64 ]
        indexType:          [ int16, int32 ]
    }

    types: {
        mesh: {
            name: string
            vertexFormat: vxFormat
            indexFormat: { type: optional of: indexType }
            meshData: { type: optional of: { type: vector of: meshLod } }
            hostVertices: { type: optional of: { type: vector of: hostVxs } }
            skeleton: { type: optional of: bone }
        }
        vxFormat: {
            component: {
                type: vector
                of: {
                    type: tuple of: [string, vertexElementType, int]
                }
            }
        }
        meshLod: {
            vertices: { type: optional of: { type: vector of: { type: vector of: stringView } } }  // stringView becase we can't know the type yet
            indices: { type: optional of: { type: vector of: int } }
            lodDist: { type: optional of: float }
        }
        hostVxs: {
            vertexFormat: vxFormat
            vertices: { type: vector of: { type: vector of: stringView } }  // stringView becase we can't know the type yet
        }
        bone: {
            transform: { type: array of: [float, 16] }
            joints: { type: optional of: { type: vector of: bone } }
        }
    }
}
