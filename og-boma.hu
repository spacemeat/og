@ { app: boma version: 0.0.4 }
{
    inherit: [cpp17, vulkan]
    namespace: og
    projectNamespace: og
    const: east
    anchor: [project, vulkanEnums]
    defaultConstructible: true
    genDir:                 $baseDir/$namespaceForFs/gen
    sharedCodeGenDir:       $baseDir/$sharedCodeNamespaceForFs/gen
    enumIsScoped:   true

    --logger: {
        namespace: og.logger
        deserializeFrom: [humon]

        enumFlags: false

        copy: delete

        --logTagEnums: {
            namespace: og.logger
            enumFlags: true
            enums: {
                logTags: [
                    error, warn, info, verbose
                    status, assetDb, featureDb, tableau
                    vulkan,
                    general, validation, performance

                    [graphics [error warn vulkan validation]]
                ]
            }
        }

        enums: {
            logParts: [
                time, message, file, line, col, fname, end, numParts
            ]
        }

        types: {
            loggerConfig: {
                version: { type: array of: [int, 3] }
                listeners: { type: vector of: listener }
                colors: { type: unorderedMap of: [
                        stringView
                        { type: array of:
                            [uint8_t, 3] } ] }
            }
            listener: {
                interests: logTags
                apathies: logTags
                logPath: stringView     // 'stderr' and 'stdout' are special
                colors: { type: optional of: {
                        type: unorderedMap of: [logParts, stringView] } }
                bgColor: { type: optional of: stringView }
                format: stringView
                retainHistory: { type: bool default: true }
            }
        }
    }

    --cmd: {
        namespace: og.command
        serializeTo: []
        deserializeFrom: []

        enumFlags: false

        enums: {
            cmd: [
                adb_createCache
                adb_openCacheFile
                adb_scheduleStorageRead
                adb_scheduleCacheAppend
                adb_latchCache
                adb_getImportCacheSize
                adb_importAsset

                mem_copyHostToHost
                mem_copyDeviceToDevice
                // ...
            ]
        }
    }

    --app: {
        namespace: og.app

        serializeTo: [humon]
        deserializeFrom: [humon]

        enumFlags: false

        enums: {
            windowMode: [headless, windowed, fullScreen]
        }

        types: {
            appConfig: {
                name: stringView
                version: stringView
                loggerConfigPath: { type: string }
                providerAliasesPath: string
                abilitiesPaths: { type: vector of: string }
                deviceConfigPath: { type: string }
                engineConfigPath: { type: string }
                views: { type: vector of: { type: variant of: [windowConfig_t, hmdConfig_t] } }
                works: { type: vector of: workUnit }
            }
            workUnit: {
                useDeviceProfileGroups: { type: vector of: { type: tuple of: [stringView, int, int ]}}
                targetViews: { type: vector of: workView }
            }
            workView: {
                views: { type: vector of: stringView }
                tableau: { type: stringView }
                renderPlan: { type: stringView }
            }
            windowConfig_t: {
                name: stringView
                mode: windowMode
                active: { type: bool default: true }
                position: { type: optional of: { type: array of: [int, 2] } }
                extents: { type: array of: [int, 2] }
                defaultMonitor: { type: optional of: int }
                screenFormat: { type: optional of: VkFormat }
                refreshRate: { type: optional of: int }
                provideVulkanSurface: { type: bool default: true }
                provideSwapchain: { type: bool default: true }
            }
            hmdConfig_t: {
                name: stringView
                active: { type: bool default: false }
                screenFormat: { type: optional of: VkFormat }
            }
        }
    }

    --engine: {
        namespace: og.engine

        serializeTo: [humon]
        deserializeFrom: [humon]

        types: {
        }
    }

    --vkDeviceCreator: {
        namespace: og.vkDeviceCreator

        deserializeFrom: [humon]

        types: {
            deviceConfig: {
                version: stringView
                minVulkanVersion: { type: stringView default: '"1.0"' }
                maxVulkanVersion: { type: stringView default: '"1.3"' }
                instanceBuiltinInclude: { type: vector of: stringView }
                instanceInclude: { type: vector of: stringView }
                instanceProfileGroups: { type: vector of: instanceProfileGroup }
                useInstanceProfileGroup: stringView
                sharedInstanceCriteria: { type: optional of: universalCriteria }
                deviceProfileGroups: { type: vector of: physDeviceProfileGroup }
            }
            instanceProfileGroup: {
                name: stringView
                enabled: { type: bool default: true }
                usingLayers: { type: bool default: true }
                include: { type: vector of: stringView }
                sharedCriteria: { type: optional of: universalCriteria }
                profiles: { type: vector of: universalCriteria }
                debugUtilsMessengers: { type: vector of: debugUtilsMessenger_t }
                validationFeatures: { type: optional of: validationFeatures_t }
            }
            physDeviceProfileGroup: {
                name: stringView
                enabled: { type: bool default: true }
                include: { type: vector of: stringView }
                sharedCriteria: { type: optional of: universalCriteria }
                profiles: { type: vector of: universalCriteria }
                queueVillageProfiles: { type: vector of: queueVillageProfile }
            }
            queueVillageProfile: {
                name: stringView
                enabled: { type: bool default: true }
                queueVillage: { type: vector of: queueFamilyAttributes }
            }
            queueFamilyAttributes: {
                name: stringView
                criteria: { type: optional of: universalCriteria }
                flags: { type: VkDeviceQueueCreateFlagBits default: 0 }
                priorities: { type: vector of: float }
                maxQueueCount: uint32_t
                globalPriority: { type: optional of: VkQueueGlobalPriorityKHR }
            }
        }
    }

    --abilities: {
        namespace: og.abilities
        deserializeFrom: [humon]
        enumFlags: false

        --criteriaEnums: {
            namespace: og.abilities
            enumFlags: true
            enums: {
                criteriaKinds: [abilities, desiredAbilities, vulkanVersion, extensions,
                                desiredExtensions, layers, desiredLayers, deviceExtensions,
                                desiredDeviceExtensions, queueTypesIncluded, queueTypesExcluded,
                                features, desiredFeatures, properties, queueFamilyProperties]
            }
        }

        enums: {
            op: [in, nin, eq, ne, lt, gt, le, ge, has, hasnot]
        }
        types: {
            providerAliases_t: {
                providerAliases: { type: unorderedMap of: [stringView, { type: vector of: providerAlias_t }] }
            }
            providerAlias_t: {
                vulkanVersion: { type: stringView }
                features: { type: optional of: stringView }
                properties: { type: optional of: stringView }
                queueFamilyProperties: { type: optional of: stringView }
            }
            abilityCollection_t: {
                abilityLibraries: { type: unorderedMap of: [stringView, abilityLibrary_t] }
            }
            abilityLibrary_t: {
                enabled: { type: bool default: true }
                mutable: { type: bool default: true }
                include: { type: vector of: stringView }
                abilities: { type: unorderedMap of: [stringView, abilityProfileGroup_t] }
            }
            abilityProfileGroup_t: {
                enabled: { type: bool default: true }
                sharedCriteria: universalCriteria
                profiles: { type: vector of: universalCriteria }
            }
            universalCriteria: {
                name: stringView
                enabled: { type: bool default: true }
                abilities: { type: vector of: stringView }
                desiredAbilities: { type: vector of: stringView }
                vulkanVersion: { type: optional of: stringView }
                extensions: { type: vector of: stringView }
                desiredExtensions: { type: vector of: stringView }
                debugUtilsMessengers: { type: vector of: debugUtilsMessenger_t }
                validationFeatures: { type: optional of: validationFeatures_t }
                layers: { type: vector of: stringView }
                desiredLayers: { type: vector of: stringView }
                deviceExtensions: { type: vector of: stringView }
                desiredDeviceExtensions: { type: vector of: stringView }
                queueTypesIncluded: { type: optional of: VkQueueFlagBits }
                queueTypesExcluded: { type: optional of: VkQueueFlagBits }
                features: { type: unorderedMap of: [stringView, { type: vector of: stringView } ] }
                desiredFeatures: { type: unorderedMap of: [stringView, { type: vector of: stringView } ] }
                properties: { type: unorderedMap of: [stringView, { type: vector of: { type: tuple of: [stringView, op, stringView] } } ] }
                queueFamilyProperties: { type: unorderedMap of: [stringView, { type: vector of: { type: tuple of: [stringView, op, stringView] } } ] }
            }
            debugUtilsMessenger_t: {
                severity: VkDebugUtilsMessageSeverityFlagBitsEXT
                type: VkDebugUtilsMessageTypeFlagBitsEXT
            }
            validationFeatures_t: {
                enabled: { type: vector of: VkValidationFeatureEnableEXT }
                disabled: { type: vector of: VkValidationFeatureDisableEXT }
            }



        }
    }

    --renderPlan: {
        namespace: og.renderPlan

        serializeTo: [humon]
        deserializeFrom: [humon]

        enumFlags: false

        enums: {
            stepKind: [computePass, renderPass, namedStep]
        }

        types: {
            renderPlan: {
                name: string
                passes: { type: vector of: renderPass }
                steps: { type: vector of: renderStep }
            }

            renderStep: {
                kind: stepKind
                name: string
                subpass: { type: uint32_t default: 0 }
            }

            computePass: {
                name: string
                //...
            }

            renderPass: {
                name: string
                flags: { type: VkRenderPassCreateFlagBits default: 0 }
                multiView: { type: optional of: renderPassMultiView }
                fragmentDensityMap: { type: optional of: string } // pNext
                inputAttachmentAspects: { type: vector of: inputAttachmentAspectRef } // pNext
                attachments: { type: vector of: attachmentDesc }
                subpasses: { type: vector of: subpassDesc }
                subpassDeps: { type: vector of: subpassDep }
            }

            renderPassMultiView: {
                viewMasks: { type: vector of: uint32_t }
                viewOffsets: { type: vector of: uint32_t }
                correlationMasks: { type: vector of: uint32_t }
            }

            attachmentRef: {
                attachmentIdx: uint32_t
                layout: VkImageLayout
                aspectMask: { type: VkImageAspectFlagBits default: none }
                stencilLayout: { type: VkImageLayout default: undefined } // pNext
            }

            inputAttachmentAspectRef: {
                subpass: uint32_t
                inputAttachmentIndex: uint32_t
                aspectMask: VkImageAspectFlags
            }

            attachmentDesc: {
                mayAlias: { type: bool default: false }
                format: VkFormat
                samples: int
                loadOp: VkAttachmentLoadOp
                storeOp: VkAttachmentStoreOp
                stencilLoadOp: { type: VkAttachmentLoadOp default: dont_care }
                stencilStoreOp: { type: VkAttachmentStoreOp default: dont_care }
                initialLayout: VkImageLayout
                finalLayout: VkImageLayout
                depthStencilInitialLayout: { type: VkImageLayout default: undefined } // pNext
                depthStencilFinalLayout: { type: VkImageLayout default: undefined }   // ''
            }

            subpassDesc: {
                flags: { type: VkSubpassDescriptionFlagBits default: 0 }
                pipelineBindPoint: VkPipelineBindPoint
                viewMask: { type: uint32_t default: 0 }
                inputAttachments: { type: vector of: attachmentRef }
                colorAttachments: { type: vector of: attachmentRef }
                resolveAttachments: { type: vector of: attachmentRef }
                depthStencilAttachments: { type: vector of: attachmentRef }
                preserveAttachments: { type: vector of: uint32_t }
                depthStencilResolve: { type: optional of: subpassDescDepthStencilResolve }
                fragmentShadingRateAttachment: { type: optional of: subpassDescFragmentShadingRateAttachment }
            }

            subpassDescDepthStencilResolve: {
                depthResolveMode: VkResolveModeFlagBits
                stencilResolveMode: VkResolveModeFlagBits
                depthStencilResolveAttachment: { type: vector of: attachmentRef }
            }

            subpassDescFragmentShadingRateAttachment: {
                fragmentShadingRateAttachment: { type: optional of: attachmentRef }
                shadingRateAttachmentTexelSize: { type: pair of: [uint32_t, uint32_t] }
            }

            subpassDep: {
                srcSubpass: uint32_t
                dstSubpass: uint32_t
                srcStageMask: VkPipelineStageFlagBits2
                dstStageMask: VkPipelineStageFlagBits2
                srcAccessMask: VkAccessFlags2
                dstAccessMask: VkAccessFlags2
                flags: VkDependencyFlagBits
                viewOffset: int32_t

                memoryBarriers: { type: vector of: memoryBarrier }
            }

            memoryBarrier: {
                srcStageMask: VkPipelineStageFlagBits2
                dstStageMask: VkPipelineStageFlagBits2
                srcAccessMask: VkAccessFlags2
                dstAccessMask: VkAccessFlags2
            }
        }
    }

    --assetDb: {
        namespace: og.assetDb
        diffable: true

        serializeTo: [humon]
        deserializeFrom: [humon]

        enumFlags: false

        enums: {
            assetKind: [ mesh ]
        }

        types: {
            assetDb: {
                packs: { type: vector of: string } // asset dirs
            }

            assetPack: {
                name: stringView
                dir: stringView
                assets: { type: vector of: { type: variant of: [
                    model
                    mesh
                    vertices
                    indices
                    skeleton
                    material
                    shader
                    texture2d
                ]}}
            }

            cacheRef: {
                cacheIndex: int
                cacheOffset: int
                cacheSize: int
            }

            import: {
                source: stringView
                lastModTime: int
            }

            model: {
                name: stringView
                mesh_adbi: int
                material_adbi: int
            }

            mesh: {
                name: stringView
                source: import
                lods: { type: vector of: meshLod }
                skeleton_adbi: int
            }

            meshLod: {
                topology: VkPrimitiveTopology
                vertices_adbi: int
                // vxs offset, numVx, index offset, numPrims
                indices_adbi: { type: optional of: int }
                numBlendWeights: { type: optional of: int }
                numBones: { type: optional of: int }
            }

            vertices: {
                name: stringView
                source_adbi: int
                vertexFormat: { type: vector of: { type: tuple  of: [stringView, VkFormat] } }
                vxData: cacheRef
            }

            indices: {
                name: stringView
                source_adbi: int
                indexFormat: VkIndexType
                idxData: cacheRef
            }

            skeleton: {
                name: stringView
                source_adbi: int
                numBones: int
                boneData: cacheRef
            }

            material: {
                name: stringView
                shader_adbis: { type: vector of: int }
                texture_adbis: { type: vector of: { type: pair of: [stringView, int] } }
            }

            shader: {
                name: stringView
                source: import
                stage: VkPipelineStageFlagBits
                entryPoint: stringView
                bytecode: cacheRef
            }

            texture2d: {
                name: stringView
                source: import
                dims: { type: array of: [int, 2] }
                format: VkFormat
                mipLevels: int
                txData: cacheRef
            }
        }
    }

    --asset_mesh: {
        namespace: og.assets.mesh

        serializeTo: [humon]
        deserializeFrom: [humon]

        enumFlags: false

        enums: {
            vertexElementType:  [ float32, float64,
                                int8, int16, int32, int64,
                                uint8, uint16, uint32, uint64 ]
            indexType:          [ int16, int32 ]
        }

        types: {
            meshDesc: {
                name: stringView
                lods: { type: vector of: lod }
                skeleton: { type: optional of: bone }
            }
            lod: {
                topology: VkPrimitiveTopology
                // some distance factor/bias here
                vertices: vertexInfo
                indices: indexInfo
            }
            vertexInfo: {
                vertexFormat:   { type: vector   of: { type: tuple  of: [stringView, VkFormat] } }
                vxData:         { type: optional of: { type: vector of: { type: vector of: stringView } } }  // stringView becase we can't know the type yet
            }
            indexInfo: {
                indexFormat:    VkIndexType
                idxData:        { type: optional of: { type: vector of: int } }
            }
            bone: {
                transform: { type: array of: [float, 16] }
                joints: { type: optional of: { type: vector of: bone } }
            }
        }
    }

    --tableau: {
        namespace: og.tableau
        include: ['og/tableau/inc/Tableau.hpp']
        serializeTo: [humon]
        deserializeFrom: [humon]

        types: {
            // tableau / objs
            tableau: {
                -deriveFrom: Tableau<tableau>
                name: stringView
                hu.node: hierarchy
                frames: { type: vector of: frame }
                objects: { type: vector of: object }
            }

            frame: {
                name: stringView
                transform: { type: array of: [float, 16] }
                owner: int
            }

            object: {
                name: stringView
                owner: int
                features: { type: vector of: { type: variant of: [
                    visibleModel
                    shadowCaster
                    ] } }
            }

            visibleModel: {
                enabled: bool
                asset: { type: pair of: [stringView, int] }
            }

            shadowCaster: {
                enabled: bool
                asset: { type: pair of: [stringView, int] }
            }
        }
    }

    --featureReq: {
        namespace: og.featureReq
        include: ['og/featureReq/inc/FeatureReq.hpp']
        serializeTo: [humon]

        types:
        {
            featureReqs: {
                //-deriveFrom: FeatureReqs<featureReqs>
                features: { type: vector of: featureReq }
            }

            cacheInfo: {
                assetDbAddress: { type: tuple of: [stringView, int] }
                sizeInCache: int
            }

            featureReq: {
                -deriveFrom: FeatureReq<featureReq>
                featureRefCount: { type: int default: 0 }
                resourceReady: { type: bool default: false }
                cacheSource: { type: optional of: cacheInfo }
                featureDetails: { type: variant of: [featureReq_VkBuffer,
                                                    featureReq_VkImage,
                                                    featureReq_VkShaderModule]}
                                                    // ... others
            }

            featureReq_VkBuffer: {
                sizeInResource: int
                memoryProperties: { type: VkMemoryPropertyFlagBits }
                usages: { type: variant of: VkBufferUsageFlagBits }
                queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
                dedicated: bool
                sparseMemoryFlags: { type: VkSparseMemoryBindFlagBits, default: 0 }
            }

            featureReq_VkImage: {
                sizeInResource: int
                memoryProperties: { type: VkMemoryPropertyFlagBits }
                usages: { type: variant of: VkImageUsageFlagBits }
                queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
                dedicated: bool
                sparseMemoryFlags: { type: VkSparseMemoryBindFlagBits, default: 0 }
            }

            featureReq_VkShaderModule: {
                stage: VkPipelineStageFlagBits
                entryPoint: stringView
            }

            featureReq_VkPipeline: {
            }

            featureReq_VkDescriptorSet: {
            }
        }
    }

    --featureDb: {
        namespace: og.featureDb
        include: ['og/featureDb/inc/FeatureDb.hpp']
        serializeTo: [humon]

        diffable: true

        types:
        {
            featureDb: {
                -deriveFrom: FeatureDb<featureDb>
                memoryPlan: { type: vector of: memTypePlan }
                shaderPlan: { type: vector of: shaderModule }
                pipelinePlan: { type: vector of: pipeline }
                descriptorSetPlan: { type: vector of: descriptorSet }
            }
            memTypePlan: {
                memTypeIndex: int
                memoryProperties: { type: VkMemoryPropertyFlagBits }
                allocations: { type: vector of: allocation }
            }
            allocation: {
                allocationIndex: int
                dedicated: bool
                resources: { type: vector of: { type: variant of: [buffer, image] } }
            }
            buffer: {
                resourceIndex: int
                assetDbAddress: { type: optional of: { type: tuple of: [stringView, int] } }
                usages: VkBufferUsageFlagBits
                sparseMemoryFlags: VkSparseMemoryBindFlagBits
                sizeInCache: int
                sizeInResource: int
                queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
                subresources: { type: vector of: subBuffer }
            }
            subBuffer: {
                subresourceIndex: int
                assetDbAddress: { type: optional of: { type: tuple of: [stringView, int, int] } }
                usages: VkBufferUsageFlagBits
                sizeInCache: int
                sizeInResource: int
            }
            image: {    // image and subImage are very wrong. I know.
                resourceIndex: int
                assetDbAddress: { type: optional of: { type: tuple of: [stringView, int] } }
                usages: VkImageUsageFlagBits
                sizeInCache: int
                sizeInResource: int
                queues: { type: vector of: { type: tuple of: [VkQueueFlagBits, VkAccessFlagBits, VkPipelineStageFlagBits] } }
                subresources: { type: vector of: subImage }
            }
            subImage: {
                subresourceIndex: int
                assetDbAddress: { type: optional of: { type: tuple of: [stringView, int, int] } }
                usages: VkImageUsageFlagBits
                sizeInCache: int
                sizeInResource: int
            }

            shaderModule: {
                featureDbIndex: int
                assetDbAddress: { type: optional of: { type: tuple of: [stringView, int, int] } }
                stage: VkPipelineStageFlagBits
                entryPoint: stringView
            }

            pipeline: {
                featureDbIndex: int
                // lots of stuff here to collect and compile into a vkpipeline
                // including specializationinfo
                // whatever uniqely defines a pipeline
            }

            descriptorSet: {
                featureDbIndex: int
                // TBD
            }
        }
    }

    --featureSchedule:
    {
        namespace: og.featureSchedule
        //include: ['"featureDb/inc/FeatureSchedule.hpp"']
        serializeTo: []
        deserializeFrom: []
        comparable: false
        memberwiseConstructible: true

        types:
        {
            // schedule
            featureSchedule: {
                schedule: { type: vector of: { type: variant of: [
                    setAssetDbWindowCommand,
                    transferCachedAssetCommand,
                    stageCachedAssetCommand,
                    scheduleStagedTransfersCommand,
                    scheduleMemoryMoveCommand,
                    /*... other shader / pipeline / other uses (even audio)
                    -- anything that needs to be scheduled from cache, really. */]}}
            }

            setAssetDbWindowCommand: {
                assetDb: stringView
                window: int
            }

            transferCachedAssetCommand: {
                assetDb: stringView
                assetIndex: int
                // on complete, call fn(pAssetInFileMap)
                completionFunction: { type: function of: 'void(void*)' }
            }

            stageCachedAssetCommand: {
                assetDb: stringView
                assetIndex: int
                stagingBufferIndex: int
                stagingBufferOffset: int
                memorySize: int
                memoryGranularity: int
                completionFunction: { type: function of: 'void()' }
            }

            scheduleStagedTransfersCommand: {
                stagingBufferIndex: int
            }

            scheduleMemoryMoveCommand: {
                from: { type: int } // featureReq index
                to: { type: optional of: { type: tuple of: [uint8_t, uint8_t, uint16_t, uint32_t] } }
                memorySize: int
                completionFunction: { type: function of: 'void()' }
            }
        }
    }
}
